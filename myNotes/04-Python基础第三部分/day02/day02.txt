day01回顾:
装饰器

def 装饰器函数名(fn):
    pass


@装饰器名
def 被装饰函数名(参数):
    ...

# 调用
被装饰函数名(实参列表)


函数的文档字符串:

函数的　__doc__属性
　　　用来绑定文档字符串

函数的　__name__属性
   用来绑定函数的名字

模块 module

模块的分类:
  内建模块
    builtins
     len, max, min, ...
  标准库模块
    .py 
  第三方模块
  自定义的模块

模块的导入语句:
   import 语句
   from import 语句
   from import * 语句

dir() 函数

math 模块
time 模块




day02笔记
系统模块 sys
  此模块全部是运行时系统相关的信息

  文档参见:
    python_base_docs_html/系统模块sys.html

自定义模块
  示例见:
    mymod1.py  # 自定义模块
    05_test_mymod1.py  # 用来导入和测试自定义的主模块

  自定义的模块的模块名必须符合"标识符"的命名规则（同变量名)

模块有各自独立的作用域
  示例见:
    mymod2.py
    mymod1.py
    06_test_mymod.py

模块化编程的优点:
  1. 有利于多人合作开发
  2. 使代码更易于维护
  3. 提高代码的复用率
  4. 有利于解决变量名冲突问题

import 语句 搜索模块的路径顺序
   1. 搜索程序运行时的路径(当前路径)
   2. sys.path 提供的路径
   3. 搜索内置模块

sys.path 是一个存储模块搜索路径的列表
   1. 可以把自定义的模块放在相应的路径下可以导入
   2. 可以把自己模块的路径添加在sys.path列表中

模块的加载过程:
  1. 在模块导入时，模块的所有语句会执行
  2. 如果一个模块已经以导入，则再次导入时不会重新执行模块内的语句

模块的重新加载:
  import mymod3
  import imp
  imp.reload(mymod3)  # 重新加载 mymod3模块

模块导入和执行的过程:
  1. 先搜索相关的路径找模块(.py)
  2. 判断是否有此模块对应的.pyc文件，如果存在pyc文件且比.py文件新，则直接加载.pyc文件
  3. 否则用.py文件生成.pyc后再进行加载

pyc 模块的编译文件
            编译              解释执行
  mymod1.py ----> mymod1.pyc --------> python3


模块的属性
  属性的实质是变量(是模块内的全局变量)

模块内预置的属性
  __doc__属性
    作用:
      用来绑定模块的文档字符串

  模块内第一个没有赋值给任何变量的字符串为模块的文档字符串

  __file__属性
     __file__ 绑定模块对应的文档路径名
       1. 对于内建模块，不绑定路径(没有__file__属性)
       2. 对于其它模块，绑定路径名的字符串  
  
  __name__属性
      此属性用来记录模块的自身名字
    作用：
      1. 记录模块名
      2. 用来判断是否为主模块(最先运行的模块)
    说明:
      当此模块为主模块时，__name__绑定 '__main__'
      当此模块不是主模块时，此属性绑定模块名


模块的__all__列表
  模块中的 __all__列表是一个用来存放可导出属性的 字符串列表

  作用:
    当用 from import *语句导入时，只导入 __all__ 列表内的属性

  示例见:
    mymod6.py

模块的隐藏属性
  模块中以'_'开头的属性，在from import * 语句导入时，将不被导入，通常称这些属性为隐藏属性

  示例见:
    mymod7.py

随机模块 random
  作用:
    用于模拟或生成随机输出的模块
  文档参见:
    python_base_docs_html/随机模块random.html

练习：
  猜数字游戏:
    写程序，随机生成一个0~100之间的数用变量x绑定
    循环让用户输入一个数用y绑定,
       输出猜数字的结果
         1. 如果y等于生成的数x,则提示"您猜对了", 打印出猜测的次数并退出
         2. 如果y 小于x则提示"您猜小了"，然后继续猜
         3. 如果y 大于x则提示"您猜大了"，然后继续猜
    猜对后程序退出并打印次数

  原理: 二分查找


包 （模块包) package
  包是将模块以文件夹的组织形式进行分组管理的方法

  作用:
    将一系列模块进行分类管理，有利于防止命名冲突
    可以在需要时加载一个或部分模块而不是全部模块
  包示例:
    mypack/
        __init__.py
        menu.py
        games/
            __init__.py
            contra.py
            supermario.py
            tanks.py
        office/
            __init__.py
            excel.py
            word.py

__init__.py 文件
  常规包内必须存在的文件
  __init__.py 会在包加载时被自动调用

  作用
    编写此包的内容
    在内部填写文档字符串
    在__init__.py 内可以加载此包所依懒的一些其它模块
  
包的导入:
  用三条import语句可以导入包（同模块的导入规则)

  import 包名 [as 包别名]
  import 包名.模块名 [as 模块新名]
  import 包名.子包名.模块名

  from 包名 import 模块名 [as 模块新名]
  from 包名.子包名 import 模块名 [as 模块新名]
  from 包名.子包名.模块名 import 属性名 [as 属性新名]

  from 包名 import *
  from 包名.模块名 import *
  ...


练习:
  1. 把学生管理系统划分为模块（把相关操作放在一个模块内）:
    建议:
       main.py 放主事件循环
       menu.py 放show_menu函数
       student_info.py 放学生信息相关的操作
  
  2. 模拟斗地主发牌,牌共54张
    黑桃('\u2660'), 梅花('\u2663'),方块('\u2665'),红桃('\u2666')
    大小王
    A2-10JQK
    三个人玩，每个人发17张牌，底牌留三张
    操作:
      输入回车: 打印第一个人的17张牌
      输入回车: .....二...........
      输入回车: .....三...........
      输入回车: 打印三张底牌
