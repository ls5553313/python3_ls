day02回顾
  模块
    os.py

sys模块
   sys.path 

自定义模块
  查找路径
    1. 当前路径
    2. sys.path
    3. 内建模块
  
  # imp.reload(已加载模块名)
  .pyc 是 .py的编译文件

模块的内建属性
  __doc__
  __name__  # 主要用来判断当前模块是否是主模块
  __file__

模块的文档字符串
   
模块的 __all__列表
    from xxx import * 

模块的隐藏属性
  以 _  开头的属性为隐藏属性
    隐藏属性在from xxx import *时不会被导入


包 
  __init__.py

包的导入用import 语句

    import 包名
    import 包名.模块名
    ...

day03笔记
  包的 __init__.py 内的 __all__ 列表
  作用:
     用来记录此包中有哪儿些子包或模块在用from 包 import *
    语句导入时是否被调导入
  说明:
    __all__列表只对 from import *语句起作用

  示例见:
    code/mypack/games/__init__.py

包的相对导入
  包的相对导入是指包内模块的相互导入

语法:
  from 相对路径包或模块 import 属性或模块名
  或
  from 相对路径包或模块 import *

相对路径:
  . 代表当前目录
  .. 代表上一级目录
  ... 代表上二级目录
  .... 以此类推
  注: 相对导入时不能超出包的外部
示例见:
  mypack/games/contra.py



包的加载路径:
  同模块的加载路径相同
     1. 当前文件夹
     2. sys.path给出的路径


day14笔记
  异常 exception

什么是错误
  错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

  特点：
    有些错误是无法预知的

什么是异常
  异常是程序出错时标识的一种状态
  当异常发生时，程序不会再向下执行，而转去调用此函数的地方待处理此错误并恢复为正常状态

异常的作用:
  1. 通知上层调用者有错误产生需要处理
  2. 用作信号



try语句的两种语法
  try-except语句
  try-finally语句

try-except语句
  语法：
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量1]:
        异常处理语句1
    except 错误类型2 [as 变量2]:
        异常处理语句2
    except (错误类型3, 错误类型4, ...) [as 变量3]:
        异常处理语句3
    ...
    except:
        异常处理语句other
    else:
        末发生异常时执行的语句
    finally:
        最终执行语句
作用：
  偿试捕获异常，将程序转为正常状态并继续执行

语法说明:
   as 子句是用于绑定错误对象的变量，可以省略不写
   except子句可以有一个或多个，但至少要有一个
   else子句最多只能有一个，也可以省略不写
   finally子句最多只能有一个，也可以省略不写

示例见:
  03_try_except.py
  04_try_????.py
  ...
  08_try_except_finally.py
  09_try_except.py

练习:
  与一个函数 get_score() 来获取学生的成绩(0~100), 如果输入出现异常，则此函数返回0,否则返回用户输入的成绩
  def get_score():
      ....
  score = get_score()
  print("学生的成绩是:", score)


try-finally语句
  语法:
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    finally 子句不可以省略
    一定不存在except子句
  作用:
    通常用try-finally语句来做触发异常时必须要处理的事情,无论异常是否发生，finally子句都会被执行
  注:
    try-finally语句不会改变程序的(正常/异常)状态

  示例:
    10_try_finally.py

问题:
  try-except 语句干什么用?
  请问错误通知是谁发出的?怎么发出?

raise 语句
  作用:
    触发一个错误,让程序进入异常状态
  语法:
    raise 异常类型
    或
    raise 异常对象
  示例见:
     11_raise.py
     12_raise_get_age.py




assert 语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)
  作用:
    当真值表达式为False时,用错误数据创建一个 AssertionError 类型的错误,并进入异常状态
  类似于:
    if 真值表达式 == False:
        raise AssertionError(错误数据)
  示例见:
    13_assert.py

小结:
  接收错误消息:
    try-except
  做必须要处理的事情的语句:
    try-finally
  发错误消息的语句:
    raise 语句
    assert 语句



为什么要用异常处理机制
  在程序调用层数较深时,向主调函数传递错误信息需要用return语句层层传递比较麻烦,所以用异常处理机制

说明示例:
  # 以建房子为例
  见:
    14_built_house.py
    15_built_house.py




练习:
  1. 一个球100米高空落下,每次落下后反弹高度是原高度的一半,再落下,
  写程序
    1) 算出皮球在第10次落地后反弹高度是多少,
    2) 打印出球共经过了多少米的路程
  

  2. 分解质因数,输入一个正整数，分解质因数:
     如:
       输入: 90
       打印:
           90=2*3*3*5
    (质因数是指最小能被原数整数的素数(不包括1))










