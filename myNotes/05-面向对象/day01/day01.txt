day05回顾:
文件 file
  文件的操作有两种:
    读  'r'
    写  'w', 'x', 'a'
  f = open(文件路径, 打开模式)

文件的操作分三步:
  打开文件
  读/写操作
  关闭文件

文件的读/写操作的模式:
  文本文件  't' (要求文件内只存文字数据)
  二进制文件 'b'

打开函数 open() 返回的文件流对象

文件流对象的方法:
  F.read
  F.readline
  F.readlines
  F.write
  F.writelines
  F.close()
  F.flush() 清空缓冲区(缓冲区的概念)
  F.tell()  得到文件的当前读写位置
  F.seek(offset, whence)  设置读写位置

sys.stdin (键盘输入)
sys.stdout (标准输出)
sys.stderr (标准错误输出)


汉字编码:
  GB系列
     gb18030
     gbk
     gb2312
  UNICODE 系列 (unicode16/unicode32)
     utf-8

编码注释:
  # -*- coding:utf-8 -*- 



面向对象编程
   object(对象) 

什么是对象
  对象是指现实中的物体或实体


什么是面向对象
  把一切看成对象(实例), 让对象和对象之建立关联关系

对象都有什么特征
   对象有很多属性(名词)
      姓名, 年龄, 性别, 
   对象有很多行为(动作,动词)
      学习,吃饭,睡觉,踢球, 工作

什么是类: class
  拥有相同属性和行为的对象分为一组,即为一个类
  类是用来描述对象的工具,用类可以创建同类对象

车(类)  -------> BYD E6(京A.88888)  实例
       \
        \.----> BMW  X5(京B.00000)  实例

狗(类) --------> 小京巴 (户籍号: 000001)
      \
       \------> 导盲犬 (户籍号: 000002)

int(类)  ------> 100(对象/实例)
        \
         \-----> 200(对象/实例)


类的创建语句:
  语法:
    class 类名(继承列表):
       '''类的文档字符串'''
       实例方法定义(类内的函数称为方法method)
       类变量定义
       类方法定义
       静态方法定义
  作用:
    创建一个类
    用于描述此类对象的行为和属性
    类用于创建此类的一个或多个对象(实例)

示例:
  class Dog:
      pass
  见:
    01_class.py


类 和 对象
  类    |   对象       实例
class   |  object  instance


构造函数
  表达式:
    类名([创建传参列表])
  作用:
    创建这个类的实例对象,并返回此实例对象的引用关系

实例(对象)说明
  实例有自己的作用域和名字空间,可以为该实例添加实例变量(属性)
  实例可以调用类方法和实例方法
  实例可以访问类变量和实例变量
示例:
    class Dog:
        pass
    dog1 = Dog()


实例方法:
  语法:
    class 类名(继承列表):
        def 实例方法名(self, 参数1, 参数2, ...):
            '''实例方法的文档字符串'''
            语句块
  作用:
    用于描述一个对象的行为,让此类型的全部对象都拥有相同的行为
  说明:
    实例方法实质是函数,是定义在类内的函数
    实例方法至少有一个形参,第一个形参代表调用这个方法的实例,一般命名为'self'

  实例方法的调用语法:
    实例.实例方法名(调用传参)
    或
    类名.实例方法名(实例, 调用传参)

  示例见:
    02_instance_method.py



属性 attribute(也叫实例变量)
  每个实例都可以有自己的变量,此变量称为实例变量(也叫属性)

属性的使用语法:
  实例.属性名

赋值规则:
  首次为属性赋值则创建此属性
  再次为属性赋值则必变属性的绑定关系
作用:
  用来记录对象自身的数据
示例见:
  03_attribute.py

实例方法和实例变量(属性)结合在一起用:
  见:
    04_dogs.py


练习:
  定义一个学生类:
     class Student:
        def set_info(self, name, age):
            '''此方法用来给学生对象添加'姓名'和'年龄'属性
            # 此处自己实现
        def show_info(self):
            '''此处显示此学生的信息'''
    如:
      s1 = Student()
      s1.set_info('小张', 20)
      s2 = Student()
      s2.set_info('小李', 18)
      s1.show_info()  # 小张 今年 20 岁
      s2.show_info()  # 小李 今年 18 岁


删除属性
  用del语句可以删除一个对象的实例变量

  语法:
    del 对象.实例变量名
  示例:
    class Cat:
        pass

    c1 = Cat()  # 创建变量
    c1.color = "白色"  # 添加属性 
    print(c1.color)   # 白色
    del c1.color     # 删除属性
    print(c1.color)  # 属性错误


问题:
  class Dog:
      pass
  dog1 = Dog()  # 对的
  dog2 = Dog('京巴', '白色')  # 出错


初始化方法
  作用:
    对新创建的对象添加实例变量(属性)或相应的资源  
  语法格式:
    class 类名(继承列表):
        def __init__(self [,形参列表]):
            语句块
  说明:
    1. 初始化方法名必须为__init__ 不可改变
    2. 初始化方法会在构造函数创建实例后自动调用,且将实例自身通过第一个参数self传入__init__方法
    3. 构造函数的实参将通过__init__方法的形参列表传入 __init__ 方法中
    4. 初始化方法内部如果需要返回则只能返回None
  示例见:
    04_init_method.py


练习:
  修改前的Student 类,
   1) 为该类添加初始化方法,实现在创建对象时自动设置 '姓名', '年龄', '成绩' 属性
   2) 添加set_score方法能为对象修改成绩信息
   3) 添加show_info方法打印学生对象的信息



析构方法
  语法:
    class 类名(继承列表):
        def __del__(self):
           语句块
  说明:
    析构方法在对象销毁时被自动调用
  作用:
    清理此对象所占用的资源
  示例见:
    06_del_method.py

  python不建议在析构方法内做任何事情,因为对象销毁的时间难以确定


预置实例属性
  __dict__ 属性
    此属性绑定一个存储此实例自身实例变量(属性)的字典

  示例:
    class Dog:
        pass
    dog1 = Dog()
    print(dog1.__dict__)
    dog1.kinds = '京巴'
    print(dog1.__dict__)

  __class__ 属性
    此属性用来绑定创建此实例的类
    作用:
      可以借助此属性来访问创建此实例的类
  示例:
    class Dog:
        pass
    dog1 = Dog()
    dog2 = Dog()
    dog3 = dog1.__class__()  # 创建dog1的同类对象

面向对象的综合示例
  有两个人:
    1.
      姓名: 张三
      年龄: 35
    2.
      姓名: 李四
      年龄: 8
    行为:
      1. 教别人学东西 teach
      2. 赚钱
      3. 借钱
  事情:
     张三 教 李四 学 python
     李四 教 张三 学 跳皮筋
     张三 上班赚了 1000元钱
     李四向张三借了 200元
  示例见:
    07_object_relative.py

用于类的函数:
  isinstance(obj, class_or_tuple) 返回这个对象obj 是否某个类class或某些类的实例,如果是则返回True, 否则返回False
  type(obj)  返回对象的类型

示例:
  class Dog:
      pass
  class Cat:
      pass
  animal = Dog()
  isinstance(animal, Dog)  # True
  isinstance(animal, Cat)  # False
  isinstance(animal, (Cat, int, list))  # False
  isinstance(animal, (Cat, int, Dog))  # True






练习:
  修改之前学生管理系统,
    原学生数据使用字典存储,现改为用对象进行存储
      要求自定义Student类来封装学生的信息和行为

    # file : student.py
    class Student:
        def __init__(self, n, a, s):
            self.name = n
            ....
    